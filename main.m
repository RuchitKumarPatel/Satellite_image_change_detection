function main()
    % MAIN - Computer Vision Challenge with Change Detection Algorithms
    
    fprintf('=== Computer Vision Challenge - Change Detection Implementation ===\n');
    fprintf('Starting application with CV algorithms...\n');
    
    % Check MATLAB version
    matlabVersion = version('-release');
    fprintf('MATLAB Version: %s\n', matlabVersion);
    
    % Check available toolboxes
    [hasCV, hasIP, hasML] = checkAvailableToolboxes();
    
    % Create full-featured GUI
    createChangeDetectionGUI(hasCV, hasIP, hasML);
    
    fprintf('Change Detection application initialized successfully!\n');
end

function [hasCV, hasIP, hasML] = checkAvailableToolboxes()
    % Check toolbox availability
    fprintf('\nChecking toolbox availability...\n');
    
    hasCV = exist('detectSURFFeatures', 'file') == 2;
    hasIP = exist('imresize', 'file') == 2;
    hasML = exist('kmeans', 'file') == 2;
    
    if hasCV, fprintf('‚úì Computer Vision Toolbox: Available\n');
    else, fprintf('‚úó Computer Vision Toolbox: Not Available\n'); end
    
    if hasIP, fprintf('‚úì Image Processing Toolbox: Available\n');
    else, fprintf('‚úó Image Processing Toolbox: Not Available\n'); end
    
    if hasML, fprintf('‚úì Statistics and Machine Learning Toolbox: Available\n');
    else, fprintf('‚úó Statistics and Machine Learning Toolbox: Not Available\n'); end
    
    if hasCV && hasIP && hasML
        fprintf('\nüéâ All toolboxes available - Full CV functionality enabled!\n');
    end
end

function createChangeDetectionGUI(hasCV, hasIP, hasML)
    % Create comprehensive change detection GUI
    
    fig = figure('Name', 'CV Challenge - Satellite Image Change Detection', ...
                 'Position', [30, 30, 1500, 1000], ...
                 'MenuBar', 'none', ...
                 'ToolBar', 'none', ...
                 'NumberTitle', 'off', ...
                 'CloseRequestFcn', @closeApp);
    
    % Store data and settings
    fig.UserData.hasCV = hasCV;
    fig.UserData.hasIP = hasIP;
    fig.UserData.hasML = hasML;
    fig.UserData.images = {};
    fig.UserData.currentFolder = '';
    fig.UserData.loadedImages = {};
    fig.UserData.alignedImages = {};
    fig.UserData.currentImagePair = [1, 2];
    fig.UserData.registrationData = [];
    fig.UserData.changeData = [];
    
    % Create all GUI components
    createControlPanel(fig);
    createVisualizationPanel(fig);
    createImageDisplayPanels(fig);
    createResultsPanel(fig);
    createStatusPanel(fig);
    
    fprintf('Full change detection GUI created!\n');
end

function createControlPanel(fig)
    % Enhanced control panel with CV options
    
    controlPanel = uipanel('Parent', fig, ...
                          'Title', 'Image Controls & Settings', ...
                          'Position', [0.01, 0.7, 0.22, 0.28], ...
                          'FontSize', 11, ...
                          'FontWeight', 'bold');
    
    % File operations
    uicontrol('Parent', controlPanel, ...
              'Style', 'pushbutton', ...
              'String', 'üìÅ Select Image Folder', ...
              'Position', [10, 220, 180, 30], ...
              'FontSize', 10, ...
              'BackgroundColor', [0.2, 0.6, 0.9], ...
              'ForegroundColor', 'white', ...
              'FontWeight', 'bold', ...
              'Callback', @(src,evt) selectImageFolder(fig));
    
    uicontrol('Parent', controlPanel, ...
              'Style', 'pushbutton', ...
              'String', 'üîÑ Load & Process', ...
              'Position', [10, 185, 180, 30], ...
              'FontSize', 10, ...
              'Enable', 'off', ...
              'BackgroundColor', [0.2, 0.8, 0.2], ...
              'ForegroundColor', 'white', ...
              'FontWeight', 'bold', ...
              'Tag', 'loadButton', ...
              'Callback', @(src,evt) loadAndProcessImages(fig));
    
    % Navigation
    uicontrol('Parent', controlPanel, ...
              'Style', 'text', ...
              'String', 'Image Navigation:', ...
              'Position', [10, 155, 180, 15], ...
              'FontSize', 9, ...
              'FontWeight', 'bold');
    
    uicontrol('Parent', controlPanel, ...
              'Style', 'pushbutton', ...
              'String', '‚óÑ Previous', ...
              'Position', [10, 130, 85, 25], ...
              'FontSize', 9, ...
              'Tag', 'prevButton', ...
              'Enable', 'off', ...
              'Callback', @(src,evt) navigateImages(fig, -1));
    
    uicontrol('Parent', controlPanel, ...
              'Style', 'pushbutton', ...
              'String', 'Next ‚ñ∫', ...
              'Position', [105, 130, 85, 25], ...
              'FontSize', 9, ...
              'Tag', 'nextButton', ...
              'Enable', 'off', ...
              'Callback', @(src,evt) navigateImages(fig, 1));
    
    uicontrol('Parent', controlPanel, ...
              'Style', 'text', ...
              'String', 'Pair: 1-2', ...
              'Position', [10, 110, 180, 15], ...
              'FontSize', 9, ...
              'Tag', 'pairText', ...
              'HorizontalAlignment', 'center');
    
    % Processing options
    uicontrol('Parent', controlPanel, ...
              'Style', 'text', ...
              'String', 'Change Detection:', ...
              'Position', [10, 85, 180, 15], ...
              'FontSize', 9, ...
              'FontWeight', 'bold');
    
    uicontrol('Parent', controlPanel, ...
              'Style', 'pushbutton', ...
              'String', 'üîß Align Images', ...
              'Position', [10, 60, 85, 25], ...
              'FontSize', 8, ...
              'Tag', 'alignButton', ...
              'Enable', 'off', ...
              'Callback', @(src,evt) alignCurrentImages(fig));
    
    uicontrol('Parent', controlPanel, ...
              'Style', 'pushbutton', ...
              'String', 'üîç Detect Changes', ...
              'Position', [105, 60, 85, 25], ...
              'FontSize', 8, ...
              'Tag', 'detectButton', ...
              'Enable', 'off', ...
              'Callback', @(src,evt) detectChanges(fig));
    
    % Status indicator
    uicontrol('Parent', controlPanel, ...
              'Style', 'text', ...
              'String', 'Ready - Select folder to begin', ...
              'Position', [10, 10, 180, 40], ...
              'FontSize', 8, ...
              'Tag', 'statusIndicator', ...
              'HorizontalAlignment', 'left', ...
              'BackgroundColor', [0.95, 0.95, 0.95]);
end

function createVisualizationPanel(fig)
    % Panel for visualization options (Project Requirement: 3 visualization types)
    
    vizPanel = uipanel('Parent', fig, ...
                      'Title', 'Visualization Methods', ...
                      'Position', [0.01, 0.4, 0.22, 0.28], ...
                      'FontSize', 11, ...
                      'FontWeight', 'bold');
    
    % Visualization type selection
    uicontrol('Parent', vizPanel, ...
              'Style', 'text', ...
              'String', 'Visualization Type:', ...
              'Position', [10, 220, 180, 15], ...
              'FontSize', 9, ...
              'FontWeight', 'bold');
    
    % Radio buttons for visualization types
    vizGroup = uibuttongroup('Parent', vizPanel, ...
                            'Position', [10/200, 140/250, 180/200, 75/250], ...
                            'Tag', 'vizGroup', ...
                            'SelectionChangedFcn', @(src,evt) updateVisualization(fig));
    
    uicontrol('Parent', vizGroup, ...
              'Style', 'radiobutton', ...
              'String', 'Difference Heatmap', ...
              'Position', [5, 50, 170, 20], ...
              'FontSize', 9, ...
              'Tag', 'heatmapRadio', ...
              'Value', 1);  % Default selection
    
    uicontrol('Parent', vizGroup, ...
              'Style', 'radiobutton', ...
              'String', 'Side-by-Side Overlay', ...
              'Position', [5, 30, 170, 20], ...
              'FontSize', 9, ...
              'Tag', 'overlayRadio');
    
    uicontrol('Parent', vizGroup, ...
              'Style', 'radiobutton', ...
              'String', 'Change Highlights', ...
              'Position', [5, 10, 170, 20], ...
              'FontSize', 9, ...
              'Tag', 'highlightRadio');
    
    % Change type classification
    uicontrol('Parent', vizPanel, ...
              'Style', 'text', ...
              'String', 'Change Type Focus:', ...
              'Position', [10, 115, 180, 15], ...
              'FontSize', 9, ...
              'FontWeight', 'bold');
    
    % Dropdown for change types (Project Requirement: 3 change types)
    uicontrol('Parent', vizPanel, ...
              'Style', 'popupmenu', ...
              'String', {'All Changes', 'Geometric Changes (Size/Shape)', 'Intensity Changes (Brightness)', 'Structural Changes (Texture)'}, ...
              'Position', [10, 90, 180, 25], ...
              'FontSize', 9, ...
              'Tag', 'changeTypeDropdown', ...
              'Callback', @(src,evt) updateVisualization(fig));
    
    % Sensitivity slider
    uicontrol('Parent', vizPanel, ...
              'Style', 'text', ...
              'String', 'Change Sensitivity:', ...
              'Position', [10, 65, 180, 15], ...
              'FontSize', 9, ...
              'FontWeight', 'bold');
    
    uicontrol('Parent', vizPanel, ...
              'Style', 'slider', ...
              'Min', 0.1, 'Max', 2.0, 'Value', 1.0, ...
              'Position', [10, 45, 140, 20], ...
              'Tag', 'sensitivitySlider', ...
              'Callback', @(src,evt) updateVisualization(fig));
    
    uicontrol('Parent', vizPanel, ...
              'Style', 'text', ...
              'String', '1.0', ...
              'Position', [155, 45, 35, 20], ...
              'FontSize', 8, ...
              'Tag', 'sensitivityText');
    
    % Apply visualization button
    uicontrol('Parent', vizPanel, ...
              'Style', 'pushbutton', ...
              'String', 'üé® Apply Visualization', ...
              'Position', [10, 15, 180, 25], ...
              'FontSize', 9, ...
              'BackgroundColor', [0.8, 0.2, 0.8], ...
              'ForegroundColor', 'white', ...
              'FontWeight', 'bold', ...
              'Tag', 'applyVizButton', ...
              'Enable', 'off', ...
              'Callback', @(src,evt) applyVisualization(fig));
end

function createImageDisplayPanels(fig)
    % Enhanced image display with results
    
    % Original images panel
    origPanel = uipanel('Parent', fig, ...
                       'Title', 'Original Images', ...
                       'Position', [0.25, 0.5, 0.48, 0.48], ...
                       'FontSize', 11, ...
                       'FontWeight', 'bold');
    
    % Image 1 (Earlier)
    axes('Parent', origPanel, ...
         'Position', [0.02, 0.1, 0.46, 0.85], ...
         'Tag', 'img1Axes', ...
         'XTick', [], 'YTick', []);
    
    % Image 2 (Later)  
    axes('Parent', origPanel, ...
         'Position', [0.52, 0.1, 0.46, 0.85], ...
         'Tag', 'img2Axes', ...
         'XTick', [], 'YTick', []);
    
    % Results/Analysis panel
    resultsPanel = uipanel('Parent', fig, ...
                          'Title', 'Change Detection Results', ...
                          'Position', [0.75, 0.5, 0.24, 0.48], ...
                          'FontSize', 11, ...
                          'FontWeight', 'bold');
    
    % Results display
    axes('Parent', resultsPanel, ...
         'Position', [0.05, 0.35, 0.9, 0.6], ...
         'Tag', 'resultsAxes', ...
         'XTick', [], 'YTick', []);
    
    % Statistics display
    uicontrol('Parent', resultsPanel, ...
              'Style', 'text', ...
              'String', 'Change Statistics:', ...
              'Position', [10, 280, 200, 15], ...
              'FontSize', 9, ...
              'FontWeight', 'bold', ...
              'HorizontalAlignment', 'left');
    
    uicontrol('Parent', resultsPanel, ...
              'Style', 'edit', ...
              'String', 'No analysis performed yet', ...
              'Position', [10, 180, 220, 95], ...
              'FontSize', 8, ...
              'Max', 8, ...
              'Tag', 'statsText', ...
              'HorizontalAlignment', 'left');
    
    % Feature detection info
    uicontrol('Parent', resultsPanel, ...
              'Style', 'text', ...
              'String', 'Features & Alignment:', ...
              'Position', [10, 155, 200, 15], ...
              'FontSize', 9, ...
              'FontWeight', 'bold', ...
              'HorizontalAlignment', 'left');
    
    uicontrol('Parent', resultsPanel, ...
              'Style', 'edit', ...
              'String', 'Load images to begin analysis', ...
              'Position', [10, 80, 220, 70], ...
              'FontSize', 8, ...
              'Max', 6, ...
              'Tag', 'featuresText', ...
              'HorizontalAlignment', 'left');
    
    % Quick action buttons
    uicontrol('Parent', resultsPanel, ...
              'Style', 'pushbutton', ...
              'String', 'üíæ Save Results', ...
              'Position', [10, 45, 100, 25], ...
              'FontSize', 8, ...
              'Tag', 'saveButton', ...
              'Enable', 'off', ...
              'Callback', @(src,evt) saveResults(fig));
    
    uicontrol('Parent', resultsPanel, ...
              'Style', 'pushbutton', ...
              'String', 'üìä Detailed Report', ...
              'Position', [120, 45, 110, 25], ...
              'FontSize', 8, ...
              'Tag', 'reportButton', ...
              'Enable', 'off', ...
              'Callback', @(src,evt) generateReport(fig));
end

function createResultsPanel(fig)
    % Panel for detailed results and comparisons
    
    detailPanel = uipanel('Parent', fig, ...
                         'Title', 'Detailed Analysis & Comparisons', ...
                         'Position', [0.25, 0.01, 0.74, 0.47], ...
                         'FontSize', 11, ...
                         'FontWeight', 'bold');
    
    % Create tabbed interface for different analysis views
    tabGroup = uitabgroup('Parent', detailPanel, ...
                         'Position', [0.01, 0.01, 0.98, 0.98], ...
                         'Tag', 'analysisTabGroup');
    
    % Tab 1: Change Map
    changeTab = uitab('Parent', tabGroup, ...
                     'Title', 'Change Map', ...
                     'Tag', 'changeTab');
    
    axes('Parent', changeTab, ...
         'Position', [0.05, 0.1, 0.9, 0.85], ...
         'Tag', 'changeMapAxes', ...
         'XTick', [], 'YTick', []);
    
    % Tab 2: Feature Matching
    featuresTab = uitab('Parent', tabGroup, ...
                       'Title', 'Feature Matching', ...
                       'Tag', 'featuresTab');
    
    axes('Parent', featuresTab, ...
         'Position', [0.05, 0.1, 0.9, 0.85], ...
         'Tag', 'featuresAxes', ...
         'XTick', [], 'YTick', []);
    
    % Tab 3: Statistics
    statsTab = uitab('Parent', tabGroup, ...
                    'Title', 'Statistics & Metrics', ...
                    'Tag', 'statsTab');
    
    axes('Parent', statsTab, ...
         'Position', [0.05, 0.55, 0.4, 0.4], ...
         'Tag', 'histogramAxes');
    
    axes('Parent', statsTab, ...
         'Position', [0.55, 0.55, 0.4, 0.4], ...
         'Tag', 'scatterAxes');
    
    uicontrol('Parent', statsTab, ...
              'Style', 'edit', ...
              'String', 'Detailed statistics will appear here after analysis...', ...
              'Position', [20, 20, 900, 200], ...
              'FontSize', 10, ...
              'Max', 15, ...
              'Tag', 'detailedStatsText');
end

function createStatusPanel(fig)
    % Comprehensive status panel
    
    statusPanel = uipanel('Parent', fig, ...
                         'Title', 'Status, Logs & System Information', ...
                         'Position', [0.01, 0.01, 0.22, 0.37], ...
                         'FontSize', 11, ...
                         'FontWeight', 'bold');
    
    uicontrol('Parent', statusPanel, ...
              'Style', 'edit', ...
              'String', {['Computer Vision Challenge - Change Detection Ready!'], [''], ...
                        ['üìã Instructions:'], ...
                        ['1. Select folder with satellite images (YYYY_MM.ext)'], ...
                        ['2. Load & process images'], ...
                        ['3. Navigate between image pairs'], ...
                        ['4. Align images for better comparison'], ...
                        ['5. Detect changes using CV algorithms'], ...
                        ['6. Choose visualization method'], ...
                        ['7. Apply visualization to see results'], [''], ...
                        ['üí° Tip: Use images from same location, different times'], ...
                        ['üìÅ Expected format: 2020_01.jpg, 2020_12.png, etc.']}, ...
              'Position', [10, 10, 290, 340], ...
              'FontSize', 9, ...
              'Max', 25, ...
              'Tag', 'statusArea', ...
              'HorizontalAlignment', 'left', ...
              'FontName', 'Courier New');
end

% CORE COMPUTER VISION FUNCTIONS

function selectImageFolder(fig)
    folder = uigetdir(pwd, 'Select folder with satellite images (YYYY_MM.ext format)');
    if folder ~= 0
        fig.UserData.currentFolder = folder;
        
        % Scan for images
        imageExtensions = {'*.jpg', '*.jpeg', '*.png', '*.bmp', '*.tiff', '*.tif'};
        allFiles = [];
        for ext = imageExtensions
            files = dir(fullfile(folder, ext{1}));
            allFiles = [allFiles; files];
        end
        
        updateStatus(fig, {sprintf('üìÅ Folder: %s', folder), ...
                          sprintf('üìä Found %d images', length(allFiles))});
        
        % Enable load button
        set(findobj(fig, 'Tag', 'loadButton'), 'Enable', 'on');
        set(findobj(fig, 'Tag', 'statusIndicator'), 'String', ...
            sprintf('Ready: %d files found', length(allFiles)));
    end
end

function loadAndProcessImages(fig)
    folder = fig.UserData.currentFolder;
    updateStatus(fig, {'üîÑ Loading images...', ''});
    
    % Find and sort images
    imageExtensions = {'*.jpg', '*.jpeg', '*.png', '*.bmp', '*.tiff', '*.tif'};
    imageFiles = [];
    for ext = imageExtensions
        files = dir(fullfile(folder, ext{1}));
        imageFiles = [imageFiles; files];
    end
    
    if length(imageFiles) < 2
        updateStatus(fig, {sprintf('‚ùå Need at least 2 images, found %d', length(imageFiles))});
        return;
    end
    
    % Sort by filename (assuming date format)
    [~, sortIdx] = sort({imageFiles.name});
    imageFiles = imageFiles(sortIdx);
    
    % Load images
    loadedImages = {};
    for i = 1:length(imageFiles)
        try
            imgPath = fullfile(folder, imageFiles(i).name);
            img = imread(imgPath);
            loadedImages{i} = img;
            updateStatus(fig, {sprintf('‚úì Loaded: %s', imageFiles(i).name)});
        catch ME
            updateStatus(fig, {sprintf('‚ùå Failed: %s', imageFiles(i).name)});
        end
    end
    
    % Store data
    fig.UserData.images = imageFiles;
    fig.UserData.loadedImages = loadedImages;
    fig.UserData.currentImagePair = [1, min(2, length(loadedImages))];
    
    % Display first pair
    displayImagePair(fig);
    enableProcessingButtons(fig, true);
    
    updateStatus(fig, {'‚úÖ Images loaded successfully!', ...
                      sprintf('üìä Total: %d images ready for analysis', length(loadedImages))});
end

function displayImagePair(fig)
    loadedImages = fig.UserData.loadedImages;
    imageFiles = fig.UserData.images;
    currentPair = fig.UserData.currentImagePair;
    
    if isempty(loadedImages), return; end
    
    idx1 = currentPair(1);
    idx2 = currentPair(2);
    
    % Display images
    if idx1 <= length(loadedImages)
        axes1 = findobj(fig, 'Tag', 'img1Axes');
        axes(axes1); cla;
        imshow(loadedImages{idx1});
        title(sprintf('Earlier: %s', imageFiles(idx1).name), 'Interpreter', 'none');
    end
    
    if idx2 <= length(loadedImages)
        axes2 = findobj(fig, 'Tag', 'img2Axes');
        axes(axes2); cla;
        imshow(loadedImages{idx2});
        title(sprintf('Later: %s', imageFiles(idx2).name), 'Interpreter', 'none');
    end
    
    % Update displays
    set(findobj(fig, 'Tag', 'pairText'), 'String', sprintf('Pair: %d-%d', idx1, idx2));
    updateNavigationButtons(fig);
    
    % Clear previous analysis
    clearAnalysisResults(fig);
end

function alignCurrentImages(fig)
    % Align current image pair using SURF features
    loadedImages = fig.UserData.loadedImages;
    currentPair = fig.UserData.currentImagePair;
    hasCV = fig.UserData.hasCV;
    
    if isempty(loadedImages) || ~hasCV
        updateStatus(fig, {'‚ùå Need loaded images and Computer Vision Toolbox'});
        return;
    end
    
    updateStatus(fig, {'üîÑ Aligning images using SURF features...'});
    
    try
        idx1 = currentPair(1);
        idx2 = currentPair(2);
        
        img1 = loadedImages{idx1};
        img2 = loadedImages{idx2};
        
        % Convert to grayscale if needed
        if size(img1, 3) == 3, gray1 = rgb2gray(img1); else, gray1 = img1; end
        if size(img2, 3) == 3, gray2 = rgb2gray(img2); else, gray2 = img2; end
        
        % Detect SURF features
        points1 = detectSURFFeatures(gray1);
        points2 = detectSURFFeatures(gray2);
        
        % Extract features
        [features1, validPoints1] = extractFeatures(gray1, points1);
        [features2, validPoints2] = extractFeatures(gray2, points2);
        
        % Match features
        indexPairs = matchFeatures(features1, features2);
        matchedPoints1 = validPoints1(indexPairs(:, 1));
        matchedPoints2 = validPoints2(indexPairs(:, 2));
        
        % Estimate geometric transformation
        if length(matchedPoints1) >= 4
            [tform, inlierIdx] = estimateGeometricTransform2D(...
                matchedPoints1, matchedPoints2, 'similarity');
            
            % Apply transformation to align img2 to img1
            alignedImg2 = imwarp(img2, tform, 'OutputView', imref2d(size(img1)));
            
            % Store results
            fig.UserData.alignedImages = {img1, alignedImg2};
            fig.UserData.registrationData = struct(...
                'tform', tform, ...
                'matchedPoints1', matchedPoints1, ...
                'matchedPoints2', matchedPoints2, ...
                'inlierIdx', inlierIdx, ...
                'numMatches', length(matchedPoints1), ...
                'numInliers', sum(inlierIdx));
            
            % Update displays
            axes2 = findobj(fig, 'Tag', 'img2Axes');
            axes(axes2); cla;
            imshow(alignedImg2);
            title('Later: Aligned Image', 'Color', [0, 0.7, 0]);
            
            % Update feature info
            featuresText = findobj(fig, 'Tag', 'featuresText');
            featureInfo = {
                sprintf('SURF Features Detected:');
                sprintf('  Image 1: %d features', length(points1));
                sprintf('  Image 2: %d features', length(points2));
                sprintf('Feature Matches: %d', length(matchedPoints1));
                sprintf('Inliers: %d (%.1f%%)', sum(inlierIdx), 100*sum(inlierIdx)/length(inlierIdx));
                sprintf('Alignment: SUCCESS');
            };
            set(featuresText, 'String', featureInfo);
            
            % Show feature matching in features tab
            displayFeatureMatching(fig);
            
            % Enable change detection
            set(findobj(fig, 'Tag', 'detectButton'), 'Enable', 'on');
            
            updateStatus(fig, {'‚úÖ Image alignment completed!', ...
                              sprintf('üéØ %d features matched, %d inliers', ...
                                     length(matchedPoints1), sum(inlierIdx))});
        else
            updateStatus(fig, {'‚ùå Insufficient feature matches for alignment'});
        end
        
    catch ME
        updateStatus(fig, {sprintf('‚ùå Alignment failed: %s', ME.message)});
    end
end

function displayFeatureMatching(fig)
    % Display feature matching results
    regData = fig.UserData.registrationData;
    loadedImages = fig.UserData.loadedImages;
    currentPair = fig.UserData.currentImagePair;
    
    if isempty(regData), return; end
    
    % Get images
    img1 = loadedImages{currentPair(1)};
    img2 = loadedImages{currentPair(2)};
    
    % Display in features tab
    featuresAxes = findobj(fig, 'Tag', 'featuresAxes');
    axes(featuresAxes); cla;
    
    % Show matched features
    showMatchedFeatures(img1, img2, ...
                       regData.matchedPoints1, regData.matchedPoints2(regData.inlierIdx), ...
                       'montage');
    title(sprintf('Feature Matching: %d inliers of %d matches', ...
          regData.numInliers, regData.numMatches));
end

function detectChanges(fig)
    % Detect changes between aligned images
    alignedImages = fig.UserData.alignedImages;
    hasIP = fig.UserData.hasIP;
    
    if isempty(alignedImages)
        updateStatus(fig, {'‚ùå Please align images first'});
        return;
    end
    
    updateStatus(fig, {'üîÑ Detecting changes...'});
    
    try
        img1 = alignedImages{1};
        img2 = alignedImages{2};
        
        % Convert to double for processing
        if size(img1, 3) == 3
            img1_gray = rgb2gray(img1);
            img2_gray = rgb2gray(img2);
        else
            img1_gray = img1;
            img2_gray = img2;
        end
        
        img1_double = double(img1_gray);
        img2_double = double(img2_gray);
        
        % Compute basic difference
        diffImg = abs(img2_double - img1_double);
        
        % Apply Gaussian smoothing if available
        if hasIP
            diffImg = imgaussfilt(diffImg, 1.5);
        end
        
        % Threshold for change detection
        threshold = 30; % Adjustable
        changeMask = diffImg > threshold;
        
        % Compute change statistics
        totalPixels = numel(changeMask);
        changedPixels = sum(changeMask(:));
        changePercentage = (changedPixels / totalPixels) * 100;
        
        % Create colored change map
        changeMap = zeros(size(img1));
        changeMap(:,:,1) = img1_gray;  % Red channel: original
        changeMap(:,:,2) = img1_gray;  % Green channel: original
        changeMap(:,:,3) = img1_gray;  % Blue channel: original
        
        % Highlight changes in red
        changeMap(:,:,1) = changeMap(:,:,1) + double(changeMask) * 100;
        changeMap = uint8(min(changeMap, 255));
        
        % Store results
        fig.UserData.changeData = struct(...
            'diffImg', diffImg, ...
            'changeMask', changeMask, ...
            'changeMap', changeMap, ...
            'changePercentage', changePercentage, ...
            'threshold', threshold, ...
            'totalPixels', totalPixels, ...
            'changedPixels', changedPixels);
        
        % Display change map
        resultsAxes = findobj(fig, 'Tag', 'resultsAxes');
        axes(resultsAxes); cla;
        imshow(changeMap);
        title(sprintf('Changes: %.2f%%', changePercentage));
        
        % Update statistics
        statsText = findobj(fig, 'Tag', 'statsText');
        statsInfo = {
            sprintf('Change Detection Results:');
            sprintf('  Total pixels: %d', totalPixels);
            sprintf('  Changed pixels: %d', changedPixels);
            sprintf('  Change percentage: %.2f%%', changePercentage);
            sprintf('  Threshold used: %d', threshold);
            sprintf('  Status: COMPLETED');
        };
        set(statsText, 'String', statsInfo);
        
        % Display detailed results in change map tab
        changeMapAxes = findobj(fig, 'Tag', 'changeMapAxes');
        axes(changeMapAxes); cla;
        imshow(changeMap);
        title(sprintf('Change Detection Map - %.2f%% changed', changePercentage));
        
        % Enable visualization controls
        set(findobj(fig, 'Tag', 'applyVizButton'), 'Enable', 'on');
        set(findobj(fig, 'Tag', 'saveButton'), 'Enable', 'on');
        set(findobj(fig, 'Tag', 'reportButton'), 'Enable', 'on');
        
        updateStatus(fig, {'‚úÖ Change detection completed!', ...
                          sprintf('üìä %.2f%% of image area changed', changePercentage)});
                      
    catch ME
        updateStatus(fig, {sprintf('‚ùå Change detection failed: %s', ME.message)});
    end
end

% HELPER FUNCTIONS

function navigateImages(fig, direction)
    loadedImages = fig.UserData.loadedImages;
    currentPair = fig.UserData.currentImagePair;
    
    if isempty(loadedImages) || length(loadedImages) < 2, return; end
    
    newIdx1 = currentPair(1) + direction;
    newIdx2 = currentPair(2) + direction;
    
    if newIdx1 < 1 || newIdx2 > length(loadedImages), return; end
    
    fig.UserData.currentImagePair = [newIdx1, newIdx2];
    displayImagePair(fig);
end

function updateNavigationButtons(fig)
    loadedImages = fig.UserData.loadedImages;
    currentPair = fig.UserData.currentImagePair;
    
    prevBtn = findobj(fig, 'Tag', 'prevButton');
    nextBtn = findobj(fig, 'Tag', 'nextButton');
    
    if currentPair(1) <= 1, set(prevBtn, 'Enable', 'off');
    else, set(prevBtn, 'Enable', 'on'); end
    
    if currentPair(2) >= length(loadedImages), set(nextBtn, 'Enable', 'off');
    else, set(nextBtn, 'Enable', 'on'); end
end

function enableProcessingButtons(fig, enable)
    buttons = {'alignButton', 'detectButton'};
    enableStr = 'off'; if enable, enableStr = 'on'; end
    
    for i = 1:length(buttons)
        btn = findobj(fig, 'Tag', buttons{i});
        if ~isempty(btn), set(btn, 'Enable', enableStr); end
    end
end

function clearAnalysisResults(fig)
    % Clear previous analysis results
    fig.UserData.alignedImages = {};
    fig.UserData.registrationData = [];
    fig.UserData.changeData = [];
    
    % Reset displays
    set(findobj(fig, 'Tag', 'featuresText'), 'String', 'Load images and align for analysis');
    set(findobj(fig, 'Tag', 'statsText'), 'String', 'No analysis performed yet');
    
    % Clear axes
    axes(findobj(fig, 'Tag', 'resultsAxes')); cla;
    text(0.5, 0.5, 'Results will appear here', 'HorizontalAlignment', 'center');
    
    % Disable visualization buttons
    set(findobj(fig, 'Tag', 'applyVizButton'), 'Enable', 'off');
    set(findobj(fig, 'Tag', 'saveButton'), 'Enable', 'off');
    set(findobj(fig, 'Tag', 'reportButton'), 'Enable', 'off');
end

% PLACEHOLDER FUNCTIONS (to be implemented in next step)
function updateVisualization(fig)
    % Update sensitivity slider display
    slider = findobj(fig, 'Tag', 'sensitivitySlider');
    text = findobj(fig, 'Tag', 'sensitivityText');
    if ~isempty(slider) && ~isempty(text)
        set(text, 'String', sprintf('%.1f', get(slider, 'Value')));
    end
end

function applyVisualization(fig)
    updateStatus(fig, {'üé® Advanced visualization features coming in Step 4!'});
end

function saveResults(fig)
    updateStatus(fig, {'üíæ Save functionality coming in Step 4!'});
end

function generateReport(fig)
    updateStatus(fig, {'üìä Report generation coming in Step 4!'});
end

function updateStatus(fig, messages)
    % Enhanced status update
    statusArea = findobj(fig, 'Tag', 'statusArea');
    currentTime = datestr(now, 'HH:MM:SS');
    
    if ~iscell(messages), messages = {messages}; end
    if size(messages, 1) == 1 && size(messages, 2) > 1
        messages = messages';
    end
    
    timestampedMessages = cell(length(messages), 1);
    timestampedMessages{1} = sprintf('[%s] %s', currentTime, messages{1});
    if length(messages) > 1
        for i = 2:length(messages)
            timestampedMessages{i} = messages{i};
        end
    end
    
    currentContent = get(statusArea, 'String');
    if ischar(currentContent), currentContent = {currentContent}; end
    if ~isempty(currentContent) && size(currentContent, 1) == 1 && size(currentContent, 2) > 1
        currentContent = currentContent';
    end
    
    if isempty(currentContent)
        newContent = timestampedMessages;
    else
        newContent = [timestampedMessages; {''}; currentContent];
    end
    
    if length(newContent) > 50, newContent = newContent(1:50); end
    set(statusArea, 'String', newContent);
end

function closeApp(fig, ~)
    fprintf('Closing Change Detection application...\n');
    delete(fig);
end