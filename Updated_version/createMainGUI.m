function fig = createMainGUI(hasCV, hasIP, hasML)
    % CREATEMAINGUI - Create the main GUI for satellite change detection
    %
    % Input:
    %   hasCV - Boolean for Computer Vision Toolbox availability
    %   hasIP - Boolean for Image Processing Toolbox availability  
    %   hasML - Boolean for Statistics & ML Toolbox availability
    %
    % Output:
    %   fig - Handle to the main figure window
    
    % Create main figure
    fig = figure('Name', 'Satellite Change Detection System v2.0', ...
                 'Position', [50, 50, 1400, 900], ...
                 'MenuBar', 'none', ...
                 'ToolBar', 'none', ...
                 'NumberTitle', 'off', ...
                 'CloseRequestFcn', @closeApplication, ...
                 'Units', 'pixels', ...
                 'Resize', 'on');
    
    % Initialize application data structure
    appData = struct();
    appData.hasCV = hasCV;
    appData.hasIP = hasIP;
    appData.hasML = hasML;
    appData.images = {};
    appData.currentFolder = '';
    appData.loadedImages = {};
    appData.preprocessedImages = {};
    appData.alignedImages = {};
    appData.currentImagePair = [1, 2];
    appData.registrationData = [];
    appData.changeData = [];
    appData.imageMetadata = {};
    
    % Store axes handles
    appData.axes = struct();
    appData.axes.img1 = [];
    appData.axes.img2 = [];
    appData.axes.results = [];
    appData.axes.visualization = [];
    appData.axes.features = [];
    appData.axes.histogram = [];
    appData.axes.scatter = [];
    
    % Set application data
    setappdata(fig, 'AppData', appData);
    
    % Create UI panels
    createControlPanel(fig);
    createImageDisplayPanel(fig);
    createResultsPanel(fig);
    createVisualizationPanel(fig);
    createStatusPanel(fig);
    
    % Initialize callbacks
    initializeCallbacks(fig);
    
    fprintf('GUI successfully created.\n');
end

function createControlPanel(fig)
    % Create control panel on the left
    controlPanel = uipanel('Parent', fig, ...
                          'Title', 'Controls', ...
                          'Units', 'normalized', ...
                          'Position', [0.01, 0.5, 0.18, 0.49], ...
                          'FontSize', 10, ...
                          'FontWeight', 'bold');
    
    % Folder selection button
    uicontrol('Parent', controlPanel, ...
              'Style', 'pushbutton', ...
              'String', 'Select Folder', ...
              'Units', 'normalized', ...
              'Position', [0.05, 0.85, 0.9, 0.08], ...
              'FontSize', 9, ...
              'Callback', @(src,evt) selectImageFolder(fig), ...
              'Tag', 'selectFolderBtn');
    
    % Load images button
    uicontrol('Parent', controlPanel, ...
              'Style', 'pushbutton', ...
              'String', 'Load Images', ...
              'Units', 'normalized', ...
              'Position', [0.05, 0.75, 0.9, 0.08], ...
              'FontSize', 9, ...
              'Enable', 'off', ...
              'Callback', @(src,evt) loadImages(fig), ...
              'Tag', 'loadImagesBtn');
    
    % Image pair selection
    uicontrol('Parent', controlPanel, ...
              'Style', 'text', ...
              'String', 'Image 1:', ...
              'Units', 'normalized', ...
              'Position', [0.05, 0.62, 0.3, 0.05], ...
              'FontSize', 8);
    
    uicontrol('Parent', controlPanel, ...
              'Style', 'popupmenu', ...
              'String', {'No images'}, ...
              'Units', 'normalized', ...
              'Position', [0.35, 0.62, 0.6, 0.05], ...
              'FontSize', 8, ...
              'Tag', 'image1Selector', ...
              'Callback', @(src,evt) updateImagePair(fig, 1));
    
    uicontrol('Parent', controlPanel, ...
              'Style', 'text', ...
              'String', 'Image 2:', ...
              'Units', 'normalized', ...
              'Position', [0.05, 0.54, 0.3, 0.05], ...
              'FontSize', 8);
    
    uicontrol('Parent', controlPanel, ...
              'Style', 'popupmenu', ...
              'String', {'No images'}, ...
              'Units', 'normalized', ...
              'Position', [0.35, 0.54, 0.6, 0.05], ...
              'FontSize', 8, ...
              'Tag', 'image2Selector', ...
              'Callback', @(src,evt) updateImagePair(fig, 2));
    
    % Processing buttons
    uicontrol('Parent', controlPanel, ...
              'Style', 'pushbutton', ...
              'String', 'Preprocess', ...
              'Units', 'normalized', ...
              'Position', [0.05, 0.42, 0.42, 0.08], ...
              'FontSize', 9, ...
              'Enable', 'off', ...
              'Callback', @(src,evt) preprocessImages(fig), ...
              'Tag', 'preprocessBtn');
    
    uicontrol('Parent', controlPanel, ...
              'Style', 'pushbutton', ...
              'String', 'Align', ...
              'Units', 'normalized', ...
              'Position', [0.53, 0.42, 0.42, 0.08], ...
              'FontSize', 9, ...
              'Enable', 'off', ...
              'Callback', @(src,evt) alignImages(fig), ...
              'Tag', 'alignBtn');
    
    uicontrol('Parent', controlPanel, ...
              'Style', 'pushbutton', ...
              'String', 'Detect Changes', ...
              'Units', 'normalized', ...
              'Position', [0.05, 0.32, 0.9, 0.08], ...
              'FontSize', 9, ...
              'FontWeight', 'bold', ...
              'Enable', 'off', ...
              'Callback', @(src,evt) detectChanges(fig), ...
              'Tag', 'detectBtn');
    
    % Algorithm selection
    uicontrol('Parent', controlPanel, ...
              'Style', 'text', ...
              'String', 'Detection Algorithm:', ...
              'Units', 'normalized', ...
              'Position', [0.05, 0.22, 0.9, 0.05], ...
              'FontSize', 8);
    
    uicontrol('Parent', controlPanel, ...
              'Style', 'popupmenu', ...
              'String', {'Multi-Algorithm Fusion', 'Pixel Difference', 'SSIM-based', ...
                        'Edge Detection', 'Texture Analysis', 'Spectral Analysis'}, ...
              'Units', 'normalized', ...
              'Position', [0.05, 0.15, 0.9, 0.06], ...
              'FontSize', 8, ...
              'Tag', 'algorithmSelector');
    
    % Export button
    uicontrol('Parent', controlPanel, ...
              'Style', 'pushbutton', ...
              'String', 'Export Results', ...
              'Units', 'normalized', ...
              'Position', [0.05, 0.05, 0.9, 0.08], ...
              'FontSize', 9, ...
              'Enable', 'off', ...
              'Callback', @(src,evt) exportResults(fig), ...
              'Tag', 'exportBtn');
end

function createImageDisplayPanel(fig)
    % Create panel for displaying images
    imagePanel = uipanel('Parent', fig, ...
                        'Title', 'Image Display', ...
                        'Units', 'normalized', ...
                        'Position', [0.2, 0.5, 0.59, 0.49], ...
                        'FontSize', 10, ...
                        'FontWeight', 'bold');
    
    % Create axes for first image
    ax1 = axes('Parent', imagePanel, ...
               'Units', 'normalized', ...
               'Position', [0.02, 0.1, 0.47, 0.85], ...
               'Tag', 'imageAxes1', ...
               'XTick', [], 'YTick', []);
    title(ax1, 'Image 1');
    
    % Create axes for second image  
    ax2 = axes('Parent', imagePanel, ...
               'Units', 'normalized', ...
               'Position', [0.51, 0.1, 0.47, 0.85], ...
               'Tag', 'imageAxes2', ...
               'XTick', [], 'YTick', []);
    title(ax2, 'Image 2');
    
    % Store axes handles
    appData = getappdata(fig, 'AppData');
    appData.axes.img1 = ax1;
    appData.axes.img2 = ax2;
    setappdata(fig, 'AppData', appData);
end

function createResultsPanel(fig)
    % Create panel for results display
    resultsPanel = uipanel('Parent', fig, ...
                          'Title', 'Analysis Results', ...
                          'Units', 'normalized', ...
                          'Position', [0.8, 0.5, 0.19, 0.49], ...
                          'FontSize', 10, ...
                          'FontWeight', 'bold');
    
    % Create axes for results
    ax = axes('Parent', resultsPanel, ...
              'Units', 'normalized', ...
              'Position', [0.05, 0.3, 0.9, 0.65], ...
              'Tag', 'resultsAxes', ...
              'XTick', [], 'YTick', []);
    title(ax, 'Change Map');
    
    % Statistics text
    uicontrol('Parent', resultsPanel, ...
              'Style', 'text', ...
              'String', 'Statistics:', ...
              'Units', 'normalized', ...
              'Position', [0.05, 0.22, 0.9, 0.05], ...
              'FontSize', 9, ...
              'FontWeight', 'bold', ...
              'HorizontalAlignment', 'left');
    
    uicontrol('Parent', resultsPanel, ...
              'Style', 'text', ...
              'String', 'No analysis performed', ...
              'Units', 'normalized', ...
              'Position', [0.05, 0.02, 0.9, 0.2], ...
              'FontSize', 8, ...
              'Tag', 'statsText', ...
              'HorizontalAlignment', 'left');
    
    % Store axes handle
    appData = getappdata(fig, 'AppData');
    appData.axes.results = ax;
    setappdata(fig, 'AppData', appData);
end

function createVisualizationPanel(fig)
    % Create panel for advanced visualizations
    vizPanel = uipanel('Parent', fig, ...
                      'Title', 'Visualization', ...
                      'Units', 'normalized', ...
                      'Position', [0.2, 0.01, 0.79, 0.48], ...
                      'FontSize', 10, ...
                      'FontWeight', 'bold');
    
    % Create tabgroup for different visualizations
    tabgroup = uitabgroup('Parent', vizPanel, ...
                         'Units', 'normalized', ...
                         'Position', [0.01, 0.01, 0.98, 0.98]);
    
    % Visualization tab
    tab1 = uitab('Parent', tabgroup, 'Title', 'Change Visualization');
    ax1 = axes('Parent', tab1, ...
               'Units', 'normalized', ...
               'Position', [0.05, 0.1, 0.9, 0.85], ...
               'Tag', 'vizAxes', ...
               'XTick', [], 'YTick', []);
    
    % Feature matching tab
    tab2 = uitab('Parent', tabgroup, 'Title', 'Feature Matching');
    ax2 = axes('Parent', tab2, ...
               'Units', 'normalized', ...
               'Position', [0.05, 0.1, 0.9, 0.85], ...
               'Tag', 'featureAxes', ...
               'XTick', [], 'YTick', []);
    
    % Statistics tab
    tab3 = uitab('Parent', tabgroup, 'Title', 'Statistics');
    ax3 = axes('Parent', tab3, ...
               'Units', 'normalized', ...
               'Position', [0.05, 0.5, 0.42, 0.45], ...
               'Tag', 'histAxes');
    title(ax3, 'Histogram');
    
    ax4 = axes('Parent', tab3, ...
               'Units', 'normalized', ...
               'Position', [0.53, 0.5, 0.42, 0.45], ...
               'Tag', 'scatterAxes');
    title(ax4, 'Scatter Plot');
    
    % Store axes handles
    appData = getappdata(fig, 'AppData');
    appData.axes.visualization = ax1;
    appData.axes.features = ax2;
    appData.axes.histogram = ax3;
    appData.axes.scatter = ax4;
    setappdata(fig, 'AppData', appData);
end

function createStatusPanel(fig)
    % Create status/log panel
    statusPanel = uipanel('Parent', fig, ...
                         'Title', 'Status Log', ...
                         'Units', 'normalized', ...
                         'Position', [0.01, 0.01, 0.18, 0.48], ...
                         'FontSize', 10, ...
                         'FontWeight', 'bold');
    
    uicontrol('Parent', statusPanel, ...
              'Style', 'listbox', ...
              'String', {'System initialized...', 'Ready to process images'}, ...
              'Units', 'normalized', ...
              'Position', [0.02, 0.02, 0.96, 0.96], ...
              'FontSize', 8, ...
              'Tag', 'statusLog', ...
              'Max', 2);
end

function initializeCallbacks(fig)
    % Initialize all callback functions
    % This function sets up the connections to other modules
    
    % The actual callback implementations are in separate files
    % They will be called from here
end

function closeApplication(src, ~)
    % Clean up and close application
    choice = questdlg('Are you sure you want to exit?', ...
                      'Exit Application', ...
                      'Yes', 'No', 'No');
    if strcmp(choice, 'Yes')
        fprintf('\nClosing Satellite Change Detection System...\n');
        delete(src);
    end
end
